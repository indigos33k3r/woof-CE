#!/bin/bash
#(c) Copyright 2009 Barry Kauler.
#110819 support/findpkgs is new script to find all pkgs to be used in Puppy build.

export LANG=C #faster.
[ $1 ] && XPKG=$1 #download specific pkg
MWD=$PWD

. ./_00build.conf
. ./_00func
. ./DISTRO_SPECS
source_compat_repos  # ./DISTRO_COMPAT_REPOS-
source_pkgs_specs    # ./DISTRO_PKGS_SPECS-
. ./DISTRO_PET_REPOS #has PACKAGELISTS_PET_ORDER
set_binaries_var     #ex: BINARIES=tgz_txz-14.2 BINARIES=deb-xenial
create_local_repos_dirs
mkdir -p packages-${BINARIES}
mkdir -p packages-pet
rm -f DOWNLOAD-FAILS-* DOWNLOAD-ERRORS 2>/dev/null
wget --help | grep -q '\-\-show\-progress' && WGET_SHOW_PROGRESS='-q --show-progress'

xabort() {
	if [ -f /tmp/1dl_busy ] ; then
		read file < /tmp/1dl_busy
		rm -f $file /tmp/1dl_busy
	fi
	do_exit "Aborted"
}

function do_exit() { #$1: msg
	echo -e "\n${1}"
	echo -e "\nScript finished."
	[ "$WOOF_GUI" ] && { echo -n "Press ENTER key to exit: " ; read zzz ; }
	exit
}

trap "xabort" SIGINT SIGTERM

run_findpkgs #find all packages that will be used in the Puppy build...

#==============================================================================

REPOS_DISTRO_COMPAT=$(echo "$REPOS_DISTRO_COMPAT" | tr ' ' '\n')
PET_REPOS=$(echo "$PET_REPOS" | tr ' ' '\n')

echo -e "\nDownloading packages..."
if [ $XPKG ] ; then
	XFILE=/tmp/zz_downloadpkg
	grep ":${XPKG}:" status/findpkgs_FINAL_PKGS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} | sort > /tmp/zz_downloadpkg
else
	#start the gui controlpanel...
	echo 'Run' > /tmp/1download-status-request
	download_controlpanel
	XFILE=status/findpkgs_FINAL_PKGS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}
fi

echo "" > $MWD/status/download_list
LINECNT=1
cat $XFILE | while read ONEDBENTRY
do
 #120812 optional subcategory...
 #ONEDBENTRY=:GENERICNAME:|PETorCOMPAT|DBFILE|pkgname|nameonly|version|pkgrelease|category[;subcategory]|size|path|fullfilename|dependencies|description|compileddistro|compiledrelease|repo|
 #...pkgname onwards is the full db entry for a package.
 IFS="|" read -r F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 F13 <<< "$ONEDBENTRY"
 LINECNT=$(($LINECNT + 1))
 PETorCOMPAT="$F2" #ex: compat
 if [ "$PETorCOMPAT" != "pet" -a "$PETorCOMPAT" != "compat" ];then
  echo -e "\nSyntax ERROR in status/findpkgs_FINAL_PKGS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION},"
  echo "line number ${LINECNT}:"
  echo "$ONEDBENTRY"
  echo -n "Ignoring this line, press ENTER to continue (CTRL-C to abort): "
  read KEEPITGOING
  continue
 fi
 DBFILE="$F3"           #ex: Packages-puppy-5-official
 DB_genericname="$F1"	#ex: abiword
 DB_pkgname="$F4"       #ex: abiword-2.3.4-w5
 DB_fullfilename="$F11" #ex: abiword-2.3.4-w5.pet
 DB_path="$F10"         #ex: pet_packages-5
 if [ ! "$DB_path" ];then
  ONLINESUBDIR="`echo -n "$DBFILE" | cut -f 3 -d '-'`"   #ex: 5
  if [ "$PETorCOMPAT" = "pet" ];then #120515
   DB_path="pet_packages-${ONLINESUBDIR}"
  else #compat binary tarballs
   DB_path="compat_packages-${ONLINESUBDIR}"
  fi
 fi
 
 SUCCESS='no'

 if [ "$PETorCOMPAT" = "pet" ];then
  LFILE=DOWNLOAD-FAILS-PET
  FILE_DIR=packages-pet
 else #-- compat
  LFILE=DOWNLOAD-FAILS-${BINARIES}
  FILE_DIR=packages-${BINARIES}
 fi

 cd ${MWD}

 if [ -f "${FILE_DIR}/${DB_fullfilename}" ] ; then
   echo -n " ${DB_fullfilename}"
   SUCCESS='yes'
   continue
 fi
 echo -e "\n* Downloading ${DB_fullfilename}"

 cd ${FILE_DIR}

 if [ "$PETorCOMPAT" = "pet" ];then
  XREPOS="$PET_REPOS"
 else #-- compat
  XREPOS="$REPOS_DISTRO_COMPAT"
 fi

 # have to give priority to the repo $DBFILE is in
 # $DBFILE ex: Packages-slackware-14.2-official
 # z|http://mirror.aarnet.edu.au/pub/slackware/slackware-14.2|Packages-slackware-14.2-official
 REPOS="$(echo "$XREPOS" | grep "|${DBFILE}$")
$(echo "$XREPOS" | grep -v "|${DBFILE}$")"
 URLS="$(echo "$REPOS" | cut -f 2 -d '|')"

 for ONE_URL in ${URLS}
 do
    if [ -f "$DB_fullfilename" ] ; then
      SUCCESS='yes'
      break
    fi
    REMOTE_PATH=${ONE_URL}/${DB_path}/${DB_fullfilename}
    echo "  - from ${REMOTE_PATH%/*}"
    echo -n "$PWD/${DB_fullfilename}" > /tmp/1dl_busy
    wget -c ${WGET_SHOW_PROGRESS} --timeout=15 ${REMOTE_PATH} || {
       echo "  failed (file not found on server or could not finish download)"
       rm -f ${DB_fullfilename}
       continue
    }
    #-
    ${MWD}/rootfs-skeleton/usr/local/petget/verifypkg.sh ${DB_fullfilename}
    [ $? -eq 0 ] && SUCCESS='yes'
    #-
    if [ "$SUCCESS" = "no" ] ; then
       echo "  failed (file not found or corrupted file)"
       rm -f ${DB_fullfilename} 2>/dev/null
    fi
    rm -f /tmp/1dl_busy
    #--
    if [ "$SUCCESS" = "yes" ] ; then
      echo "  success"
      echo "${DB_genericname}" >> $MWD/status/download_list
      break
    fi
 done

 cd ${MWD}

 [ "$SUCCESS" = "no" ] && echo "DOWNLOAD FAIL: ${DB_fullfilename}"
 [ "$SUCCESS" = "no" ] && echo "$DB_fullfilename" >> ${LFILE}

done

[ $XPKG ] && echo && exit
do_exit ""

###END###
